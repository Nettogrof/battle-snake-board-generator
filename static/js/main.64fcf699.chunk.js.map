{"version":3,"sources":["components/CellComponent/CellComponent.tsx","components/board.tsx","components/TitledContainer/TitledContainer.tsx","components/StyledInput/StyledInput.tsx","shared/utils.tsx","components/StyledButton/StyledButton.tsx","components/CenteredRow/CenteredRow.tsx","components/BoardControls/BoardControls.tsx","components/TestSnake/TestSnake.tsx","components/ColourSquare/ColourSquare.tsx","components/FoodControl/FoodControl.tsx","components/SnakeControl/SnakeControl.tsx","components/YouControl/YouControl.tsx","components/OtherSnakesControl/OtherSnakesControl.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CellComponent","_ref","colour","onChange","isHead","react_default","a","createElement","className","style","backgroundColor","onClick","Board","boardState","marginTop","generateBoard","map","column","index","key","display","element","output","boardWithSnakes","board","snakes","concat","you","forEach","snake","body","segment","x","y","name","id","height","push","_loop","_loop2","snakePiece","undefined","food","some","CellComponent_CellComponent_CellComponent","width","TitledContainer","title","children","StyledInput","props","Object","assign","type","generateColour","Math","round","random","toString","onChangeNumberLimitFactory","target","max","arguments","length","min","event","value","test","parseInt","onBlurSetMinimumFactory","generateId","floor","StyledButton","href","tabIndex","CenteredRow","objectSpread","alignItems","marginBottom","flexWrap","BoardControls","_React$Component","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","boardCopyInput","copyBoardState","select","document","execCommand","uploadBoardState","boardUploadString","state","uploadBoard","setBoardString","setState","inherits","createClass","_this2","_this$props","changeHeight","changeWidth","boardString","JSON","stringify","TitledContainer_TitledContainer_TitledContainer","CenteredRow_CenteredRow","StyledInput_StyledInput_StyledInput","onBlur","placeholder","StyledButton_StyledButton_StyledButton","ref","readOnly","position","top","encodeURIComponent","download","game","React","Component","TestSnake","sendBoard","url","fetch","method","headers","then","res","json","move","response","window","addEventListener","tagName","_this3","_this$state","ColourSquare","FoodControl","selectFood","foodCount","ColourSquare_ColourSquare_ColourSquare","SnakeControl","apply","health","selectSnake","changeHealth","YouControl","selectYou","SnakeControl_SnakeControl_SnakeControl","OtherSnakesControl","addSnake","changeSnakeHealth","minHeight","flexDirection","margin","App","findExistingCell","findIndex","item","find","checkIfCellConnected","abs","selectCell","_this$state2","mode","chosenId","existingIndex","foundId","splice","matchingSnake","unshift","buildBoardState","ruleset","version","timeout","turn","targetSnakeId","_this$state3","targetSnake","changeBoardHeight","changeBoardWidth","uploadedState","parse","filter","e","alert","_this$state4","YouControl_YouControl","OtherSnakesControl_OtherSnakesControl","FoodControl_FoodControl","BoardControls_BoardControls","TestSnake_TestSnake","marginLeft","board_Board","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.64fcf699.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CellComponent.css\";\n\nexport interface ICell {\n  onChange?: () => void;\n  colour?: string;\n  isHead?: boolean\n}\n\nexport const CellComponent: React.SFC<ICell> = ({ colour, onChange, isHead }) => (\n  <button className=\"cell\" style={{ backgroundColor: colour ? colour : \"#d4d4d4\" }} onClick={onChange}>\n    <span>{isHead && \"*\"}</span>\n  </button>\n);","import React from \"react\";\nimport { IBoardState } from \"../types/IBoardState.interface\";\nimport { ISnake } from \"../types/ISnake.interface\";\nimport { CellComponent } from \"./CellComponent/CellComponent\";\n\nexport interface IBoard {\n  boardState: IBoardState,\n  onChange: (x: number, y: number, id: string) => void;\n}\n\nexport const Board = ({ boardState, onChange }: IBoard) => (\n  <div style={{marginTop: 10}}>\n    {generateBoard(boardState, onChange).map((column, index) => <div key={index} style={{display: \"flex\"}}>{column.map(element => element)}</div>)}\n  </div>\n)\n\nconst generateBoard = (boardState: IBoardState, onChange: (x: number, y: number, id: string) => void) => {\n  const output: JSX.Element[][] = [];\n  const boardWithSnakes: {\n    colour: string;\n    isHead: boolean;\n    id: string;\n  }[][] = [];\n  boardState.board.snakes.concat(boardState.you).forEach(snake => {\n    snake.body.forEach((segment, index) => {\n      if (!boardWithSnakes[segment.x]) {\n        boardWithSnakes[segment.x] = [];\n      }\n      boardWithSnakes[segment.x][segment.y] = {\n        colour: snake.name,\n        id: snake.id,\n        isHead: index === 0\n      };\n    })\n  })\n\n  for (let y = boardState.board.height -1 ; y >= 0 ; y--) {\n    output.push([]);\n  }\n\n  for (let y = boardState.board.height -1 ; y >= 0 ; y--) {\n    \n    for (let x = 0; x < boardState.board.width; x++) {\n      let snakePiece: {\n        colour: string;\n        isHead: boolean;\n        id: string;\n      } | undefined = boardWithSnakes[x] && boardWithSnakes[x][y] ? boardWithSnakes[x][y] : undefined;\n\n      if (boardState.board.food.some(food => food.x === x && food.y === y)) {\n        output[y].push(<CellComponent key={`${x},${y}`} colour=\"orange\" onChange={() => onChange(x, y, \"food\")} />)\n      } else if (snakePiece !== undefined) {\n        let id: string = snakePiece.id;\n        output[y].push(<CellComponent key={`${x},${y}`} colour={snakePiece.colour} isHead={snakePiece.isHead} onChange={() => onChange(x, y, id)} />)\n      } else {\n        output[y].push(<CellComponent key={`${x},${y}`} onChange={() => onChange(x, y, \"\")} />)\n      }\n    }\n  }\n  return output;\n}","import React from \"react\";\nimport \"./TitledContainer.css\";\n\ninterface ITitledContainer {\n  title: string;\n}\n\nexport const TitledContainer: React.SFC<ITitledContainer> = ({ title, children }) => {\n  return (\n    <div>\n      <div className=\"titled-container\">\n        <p className=\"container-title\">{title}</p>\n        {children}\n      </div>\n    </div>\n  )\n}","import React from \"react\";\nimport \"./StyledInput.css\";\n\nexport const StyledInput: React.SFC<React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>> = props => {\n  return <div className=\"styled-input\">\n    {props.title && <span className=\"input-title\">{props.title}:</span>}\n    <input type=\"text\" {...props} />\n  </div>\n}","import React from \"react\";\n\nexport const generateColour: () => string = () => {\n  var max = 0xffffff;\n  return '#' + Math.round(Math.random() * max).toString(16);\n}\n\nexport const onChangeNumberLimitFactory = (target: (...arg: any) => void, max: number = 1000, min: number = 0) => {\n  return (event: React.ChangeEvent<HTMLInputElement>, ) => {\n    let value = event.target.value;\n\n    if (/[\\D]/.test(value)) {\n      return;\n    }\n    if (parseInt(value, 10) > max) {\n      value = max.toString();\n    }\n    if (parseInt(value, 10) < min) {\n      value = min.toString();\n    }\n    target(value);\n  }\n}\n\nexport const onBlurSetMinimumFactory = (target: (...arg: any) => void, min: number = 0) => {\n  return (event: React.FocusEvent<HTMLInputElement>, ) => {\n    let value = event.target.value;\n\n    if (/[\\D]/.test(value)) {\n      return;\n    }\n    if (parseInt(value, 10) < min || !value) {\n      value = min.toString();\n    }\n    target(value);\n  }\n}\n\nexport const generateId = () => Math.floor((Math.random() * 1000000)).toString()","import React from \"react\";\nimport \"./StyledButton.css\";\n\nexport const StyledButton: React.SFC<React.ButtonHTMLAttributes<{}> & React.AnchorHTMLAttributes<{}>> = (props) => {\n  if (props.href) {\n    return <a {...props}>\n      <button tabIndex={-1} className=\"styled-button\">\n        {props.children}\n      </button>\n    </a>\n  } else {\n    return <button className=\"styled-button\" {...props}>{props.children}</button>\n  }\n}","import React from \"react\";\n\nexport const CenteredRow: React.SFC<React.HTMLAttributes<{}>> = (props) => <div style={{ display: \"flex\", alignItems: 'center', marginTop: \"5px\", marginBottom: \"5px\", flexWrap: \"wrap\", ...props.style }}>{props.children}</div>","import React from \"react\";\nimport { StyledInput } from \"../StyledInput/StyledInput\";\nimport { onChangeNumberLimitFactory, onBlurSetMinimumFactory } from \"../../shared/utils\";\nimport { StyledButton } from \"../StyledButton/StyledButton\";\nimport { CenteredRow } from \"../CenteredRow/CenteredRow\";\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\nimport { IBoardState } from \"../../types/IBoardState.interface\";\n\nexport interface IBoardControls {\n  height: string;\n  width: string;\n  changeHeight: (value: string) => void;\n  changeWidth: (value: string) => void;\n  uploadBoard: (value: string) => void;\n  boardState: IBoardState;\n}\n\ninterface IBoardControlsState {\n  boardUploadString: string;\n}\n\nexport class BoardControls extends React.Component<IBoardControls, IBoardControlsState> {\n\n  private boardCopyInput: HTMLInputElement | null = null;\n\n  constructor(props: IBoardControls) {\n    super(props);\n    this.state = {\n      boardUploadString: \"\"\n    }\n  }\n\n  public copyBoardState = () => {\n    if (!this.boardCopyInput) {\n      return;\n    }\n    this.boardCopyInput.select();\n    document.execCommand(\"copy\");\n  }\n\n  public uploadBoardState = () => {\n    const { boardUploadString } = this.state;\n    const { uploadBoard } = this.props;\n    uploadBoard(boardUploadString);\n  }\n\n  public setBoardString = (value: string) => this.setState({ boardUploadString: value });\n\n  render() {\n    const { height, width, changeHeight, changeWidth, uploadBoard, boardState } = this.props;\n    const boardString: string = JSON.stringify(boardState);\n    return (\n      <TitledContainer title=\"Board\">\n        <CenteredRow>\n          <StyledInput title=\"Height\" value={height} onBlur={onBlurSetMinimumFactory(changeHeight, 1)} onChange={onChangeNumberLimitFactory(changeHeight)} />\n          <StyledInput title=\"Width\" value={width} onBlur={onBlurSetMinimumFactory(changeWidth, 1)} onChange={onChangeNumberLimitFactory(changeWidth)} />\n        </CenteredRow>\n        <CenteredRow>\n          <StyledInput placeholder=\"Past Board Here\" onChange={event => this.setBoardString(event.target.value)} />\n          <StyledButton onClick={this.uploadBoardState}>Upload</StyledButton>\n        </CenteredRow>\n        <CenteredRow>\n          <StyledButton onClick={this.copyBoardState}>Copy Board State</StyledButton>\n          <input tabIndex={-1} ref={ref => this.boardCopyInput = ref} type=\"text\" readOnly value={boardString} style={{ position: \"absolute\", top: -10000 }} />\n          <StyledButton href={\"data:text/json;charset=utf-8,\" + encodeURIComponent(boardString)} download={`board-${boardState.game.id}.json`}>Download Board State</StyledButton>\n        </CenteredRow>\n      </TitledContainer>\n    )\n\n  }\n}\n","import React from \"react\";\nimport { IBoardState } from \"../../types/IBoardState.interface\";\nimport { StyledButton } from \"../StyledButton/StyledButton\";\nimport { CenteredRow } from \"../CenteredRow/CenteredRow\";\nimport { StyledInput } from \"../StyledInput/StyledInput\";\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\nimport { IBoardMove } from \"../../types/IBoardMove\";\n\nexport interface ITestSnakeProps {\n  boardState: IBoardState;\n}\n\ninterface ITestSnakeState {\n  url: string;\n  response?: string;\n}\n\nexport class TestSnake extends React.Component<ITestSnakeProps, ITestSnakeState> {\n\n  constructor(props: ITestSnakeProps) {\n    super(props);\n\n    this.state = {\n      url: \"http://localhost:5000/move\"\n    }\n  }\n\n  public componentDidMount() {\n    window.addEventListener(\"keypress\", (event) => {\n      if (event.key === \" \" && (!event.target || (event.target as any).tagName !== \"INPUT\")) {\n        this.sendBoard();\n      }\n    });\n  }\n\n  public sendBoard = () => {\n\n    const { boardState } = this.props;\n    const { url } = this.state;\n\n    fetch(url, {\n      body: JSON.stringify(boardState),\n      method: \"POST\",\n      headers: [\n        [\"content-type\", \"application/json\"]\n      ]\n    }).then(res => res.json()).then((move: IBoardMove) => this.setState({ response: move.move }));\n  }\n\n  public render() {\n\n    const { response, url } = this.state;\n\n    return (\n      <TitledContainer title=\"Test Snake\">\n        <CenteredRow>\n          <StyledInput title=\"URL\" value={url} onChange={event => this.setState({ url: event.target.value })} />\n          {response && <span>Move: {response}</span>}\n        </CenteredRow>\n        <CenteredRow>\n          <StyledButton onClick={this.sendBoard}>Ping Snake</StyledButton>\n        </CenteredRow>\n      </TitledContainer>\n    )\n  }\n\n}","import React from \"react\";\nimport \"./ColourSquare.css\";\n\nexport const ColourSquare: React.SFC<{ colour: string }> = ({ colour }) => <div className=\"colour-cell\" style={{ backgroundColor: colour }} />","import React from \"react\";\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\nimport { CenteredRow } from \"../CenteredRow/CenteredRow\";\nimport { StyledButton } from \"../StyledButton/StyledButton\";\nimport { ColourSquare } from \"../ColourSquare/ColourSquare\";\n\nexport const FoodControl: React.SFC<{ selectFood: () => void, foodCount: number }> = ({selectFood, foodCount }) => (\n\n  <TitledContainer title=\"Food\">\n    <CenteredRow>\n      <StyledButton onClick={selectFood}>\n        <ColourSquare colour=\"orange\" />\n      </StyledButton>\n      <span>Food Count: {foodCount}</span>\n    </CenteredRow>\n  </TitledContainer>\n)","import React from \"react\";\nimport \"./SnakeControl.css\";\nimport { StyledInput } from \"../StyledInput/StyledInput\";\nimport { StyledButton } from \"../StyledButton/StyledButton\";\nimport { onChangeNumberLimitFactory, onBlurSetMinimumFactory } from \"../../shared/utils\";\nimport { ColourSquare } from \"../ColourSquare/ColourSquare\";\n\nexport interface ISnakeControl {\n  colour: string;\n  health: string;\n  selectSnake: () => void;\n  changeHealth: (value: string) => void;\n  title?: string;\n}\n\nexport class SnakeControl extends React.Component<ISnakeControl, {}> {\n\n  render() {\n\n    const { colour, health, selectSnake, title, changeHealth } = this.props;\n\n    return (\n      <div className=\"snake-control-container\">\n        <StyledButton onClick={selectSnake}>\n          <ColourSquare colour={colour} />\n        </StyledButton>\n        <div className=\"vertical-flex-container\">\n          <span>{colour}</span>\n          <div>\n            <StyledInput title=\"Health\" value={health} onBlur={onBlurSetMinimumFactory(changeHealth)} onChange={onChangeNumberLimitFactory(changeHealth, 100)} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport { SnakeControl } from \"../SnakeControl/SnakeControl\";\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\n\nexport interface IYouControl {\n  selectYou: () => void;\n  colour: string;\n  health: string;\n  changeHealth: (health: string) => void;\n}\n\nexport const YouControl: React.SFC<IYouControl> = ({ selectYou, colour, health, changeHealth, }) => (\n  <TitledContainer title=\"You\">\n    <SnakeControl selectSnake={selectYou} colour={colour} health={health} changeHealth={changeHealth} />\n  </TitledContainer>\n);","import React from \"react\";\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\nimport { SnakeControl } from \"../SnakeControl/SnakeControl\";\nimport { StyledButton } from \"../StyledButton/StyledButton\";\nimport { ICoordinate } from \"../../types/ICoordinate.type\";\n\nexport interface IOtherSnakesControl {\n  selectSnake: (id: string) => void;\n  snakes: {\n    id: string;\n    colour: string;\n    body: ICoordinate[];\n    health: string;\n  }[];\n  addSnake: () => void;\n  changeSnakeHealth: (value: string, target: string) => void;\n}\n\nexport const OtherSnakesControl: React.SFC<IOtherSnakesControl> = ({selectSnake, snakes, addSnake, changeSnakeHealth}) => (\n  <TitledContainer title=\"Other Snakes\">\n    <div style={{ minHeight: \"68px\" }}>\n      {snakes.map(snake =>\n        <div key={snake.colour} style={{ display: \"inline-flex\", flexDirection: \"column\", alignItems: \"center\", margin: \"5px\" }}>\n          <SnakeControl selectSnake={() => selectSnake(snake.id)} colour={snake.colour || \"\"} health={snake.health} title={snake.colour} changeHealth={(value) => changeSnakeHealth(value, snake.id)} />\n        </div>\n      )}\n    </div>\n    <StyledButton onClick={addSnake}>Add Snake</StyledButton>\n  </TitledContainer>\n)","import React, { Component, Ref } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { IBoardState } from './types/IBoardState.interface';\nimport { Board } from './components/board';\nimport { ICoordinate } from './types/ICoordinate.type';\nimport { SnakeControl } from './components/SnakeControl/SnakeControl';\nimport { IBoardMove } from './types/IBoardMove';\nimport { TitledContainer } from './components/TitledContainer/TitledContainer';\nimport { BoardControls } from './components/BoardControls/BoardControls';\nimport { StyledButton } from './components/StyledButton/StyledButton';\nimport { generateColour, generateId } from './shared/utils';\nimport { TestSnake } from './components/TestSnake/TestSnake';\nimport { CenteredRow } from './components/CenteredRow/CenteredRow';\nimport { ColourSquare } from './components/ColourSquare/ColourSquare';\nimport { FoodControl } from './components/FoodControl/FoodControl';\nimport { YouControl } from './components/YouControl/YouControl';\nimport { OtherSnakesControl } from './components/OtherSnakesControl/OtherSnakesControl';\n\ninterface IAppState {\n  id: string;\n  height: string;\n  width: string;\n  food: ICoordinate[];\n  snakes: {\n    id: string;\n    colour: string;\n    body: ICoordinate[];\n    health: string;\n  }[];\n  you: {\n    colour: string;\n    body: ICoordinate[];\n    health: string;\n    id: \"you\";\n  };\n  mode: \"food\" | \"you\" | \"snake\";\n  chosenId: string;\n}\n\nclass App extends Component<{}, IAppState> {\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      id: generateId(),\n      height: \"15\",\n      width: \"15\",\n      food: [],\n      snakes: [],\n      you: {\n        colour: \"#22aa34\",\n        body: [],\n        health: \"100\",\n        id: \"you\"\n      },\n      mode: \"food\",\n      chosenId: \"\"\n    }\n  }\n\n  private findExistingCell = (id: string, x: number, y: number) => {\n    const { food, you, snakes } = this.state;\n\n    switch (id) {\n      case \"food\":\n        return {\n          id: \"food\",\n          index: food.findIndex(item => item.x === x && item.y === y)\n        };\n      case \"you\":\n        return {\n          id: \"you\",\n          index: you.body.findIndex(item => item.x === x && item.y === y)\n        };\n      case undefined:\n        return undefined;\n      default:\n        const snake = snakes.find(snake => snake.id === id);\n        if (snake) {\n          return {\n            id: id,\n            index: snake.body.findIndex(item => item.x === x && item.y === y)\n          };\n        }\n    }\n  }\n\n  private checkIfCellConnected: (x: number, y: number, body: ICoordinate[]) => boolean = (x, y, body) => {\n    return body.some(segment => (Math.abs(segment.x - x) === 1 && segment.y === y) || (Math.abs(segment.y - y) === 1 && segment.x === x));\n  }\n\n  public selectCell = (x: number, y: number, id: string) => {\n\n    const { mode, food, you, snakes, chosenId } = this.state;\n    let existingIndex: {\n      id: string;\n      index: number;\n    } | undefined = this.findExistingCell(id, x, y);\n\n    if (existingIndex) {\n\n      const foundId: string = existingIndex.id;\n\n      switch (foundId) {\n        case \"food\":\n          food.splice(existingIndex.index, 1);\n          break;\n        case \"you\":\n          you.body.splice(existingIndex.index);\n          break;\n        default:\n          const matchingSnake = snakes.find(snake => snake.id === foundId);\n          if (matchingSnake) {\n            matchingSnake.body.splice(existingIndex.index)\n          }\n          break;\n      }\n    }\n\n    if (!existingIndex || (existingIndex.id !== mode && existingIndex.id !== chosenId)) {\n      switch (mode) {\n        case \"food\":\n          food.push({ x, y });\n          break;\n        case \"you\":\n          if (you.body.length === 0 || this.checkIfCellConnected(x, y, you.body)) {\n            you.body.unshift({ x, y });\n          }\n          break;\n        case \"snake\":\n          const matchingSnake = snakes.find(snake => snake.id === chosenId);\n          if (!matchingSnake) {\n            return;\n          }\n          if (matchingSnake.body.length === 0 || this.checkIfCellConnected(x, y, matchingSnake.body)) {\n            matchingSnake.body.unshift({ x, y });\n          }\n          break;\n      }\n    }\n\n    this.setState({ mode, food, you, snakes, chosenId });\n  }\n\n  private buildBoardState: () => IBoardState = () => {\n    return {\n      game: {\n        id: this.state.id,\n        ruleset: {\n          name: \"standard\",\n          version: \"v.1.2.3\"\n        },\n        timeout: 500\n      },\n      turn: 200,\n      you: {\n        health: parseInt(this.state.you.health, 10),\n        id: \"you\",\n        name: this.state.you.colour,\n        body: this.state.you.body\n      },\n      board: {\n        food: this.state.food,\n        height: parseInt(this.state.height, 10),\n        width: parseInt(this.state.width, 10),\n        snakes: [{\n          health: parseInt(this.state.you.health, 10),\n          id: \"you\",\n          name: this.state.you.colour,\n          body: this.state.you.body\n        }].concat(this.state.snakes.map(snake => ({\n          health: parseInt(snake.health, 10),\n          id: snake.id,\n          name: snake.colour,\n          body: snake.body\n        })))\n      }\n    }\n  }\n\n  public addSnake = () => {\n    const colour = generateColour();\n    const { snakes } = this.state;\n    snakes.push({\n      body: [],\n      colour: colour,\n      health: \"100\",\n      id: colour\n    });\n\n    this.setState({ snakes })\n  }\n\n  public selectSnake = (id: string) => {\n    this.setState({\n      mode: \"snake\",\n      chosenId: id\n    });\n  }\n\n  public selectFood = () => {\n    this.setState({\n      mode: \"food\",\n      chosenId: \"\"\n    });\n  }\n\n  public selectYou = () => {\n    this.setState({\n      mode: \"you\",\n      chosenId: \"\"\n    });\n  }\n\n  public changeSnakeHealth = (health: string, targetSnakeId: \"you\" | string) => {\n    const { you, snakes } = this.state;\n\n    if (targetSnakeId === \"you\") {\n      you.health = health;\n      this.setState({ you });\n      return;\n    } else {\n      const targetSnake = snakes.find(snake => snake.id === targetSnakeId);\n      if (targetSnake) {\n        targetSnake.health = health;\n        this.setState({ snakes });\n      }\n    }\n  }\n\n  public changeBoardHeight = (height: string) => this.setState({ height });\n\n  public changeBoardWidth = (width: string) => this.setState({ width });\n\n  public uploadBoard = (board: string) => {\n    try {\n      const uploadedState: IBoardState = JSON.parse(board);\n      this.setState({\n        id: generateId(),\n        height: uploadedState.board.height.toString(),\n        width: uploadedState.board.width.toString(),\n        food: uploadedState.board.food,\n        snakes: uploadedState.board.snakes.filter(snake => snake.id !== uploadedState.you.id).map(snake => {\n          const colour: string = generateColour();\n          return {\n            id: colour,\n            colour: colour,\n            body: snake.body,\n            health: snake.health.toString(),\n          }\n        }),\n        you: {\n          colour: \"#22aa34\",\n          body: uploadedState.you.body,\n          health: uploadedState.you.health.toString(),\n          id: \"you\"\n        },\n        mode: \"food\",\n        chosenId: \"\"\n      });\n    } catch (e) {\n      alert(\"That didn't work\");\n    }\n  }\n\n  render() {\n\n    const { height, width, snakes, you, food, mode, chosenId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"control-container\">\n          <YouControl selectYou={this.selectYou} colour={you.colour} health={you.health} changeHealth={(value) => this.changeSnakeHealth(value, \"you\")} />\n          <OtherSnakesControl addSnake={this.addSnake} changeSnakeHealth={this.changeSnakeHealth} selectSnake={this.selectSnake} snakes={snakes} />\n          <FoodControl foodCount={food.length} selectFood={this.selectFood} />\n          <BoardControls\n            boardState={this.buildBoardState()}\n            changeHeight={this.changeBoardHeight}\n            changeWidth={this.changeBoardWidth}\n            height={height}\n            width={width}\n            uploadBoard={this.uploadBoard}\n          />\n          <TestSnake boardState={this.buildBoardState()} />\n        </div>\n        <div style={{ display: \"flex\", alignItems: \"center\", flexDirection: \"column\" }}>\n          <TitledContainer title=\"Current Mode\">\n            <div className=\"current-mode\">\n              <ColourSquare colour={mode === \"food\" ? \"orange\" : mode === \"you\" ? \"#22aa34\" : chosenId} />\n              <span style={{ marginLeft: 10 }}>{mode !== \"snake\" ? mode : chosenId}</span>\n            </div>\n          </TitledContainer>\n          <Board boardState={this.buildBoardState()} onChange={this.selectCell} />\n          <TitledContainer title=\"Keyboard Shortcuts\">\n            <p>Spacebar: Ping Snake</p>\n          </TitledContainer>\n        </div>\n        <div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}