{"version":3,"sources":["components/CellComponent/CellComponent.tsx","components/board.tsx","components/TitledContainer/TitledContainer.tsx","components/StyledInput/StyledInput.tsx","shared/utils.tsx","components/StyledButton/StyledButton.tsx","components/CenteredRow/CenteredRow.tsx","components/BoardControls/BoardControls.tsx","components/TestSnake/TestSnake.tsx","components/ColourSquare/ColourSquare.tsx","components/FoodControl/FoodControl.tsx","components/SnakeControl/SnakeControl.tsx","components/YouControl/YouControl.tsx","components/OtherSnakesControl/OtherSnakesControl.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CellComponent","_ref","colour","onChange","isHead","react_default","a","createElement","className","style","backgroundColor","onClick","Board","boardState","marginTop","generateBoard","map","column","index","key","display","element","output","boardWithSnakes","board","snakes","concat","you","forEach","snake","body","segment","x","y","name","id","_loop","push","_loop2","snakePiece","undefined","food","some","CellComponent_CellComponent_CellComponent","_onChange","apply","this","arguments","toString","_onChange2","_onChange3","width","height","TitledContainer","title","children","StyledInput","props","Object","assign","type","generateColour","Math","round","random","onChangeNumberLimitFactory","target","max","length","min","event","value","test","parseInt","onBlurSetMinimumFactory","generateId","floor","StyledButton","href","tabIndex","CenteredRow","objectSpread","alignItems","marginBottom","flexWrap","BoardControls","_React$Component","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","boardCopyInput","copyBoardState","select","document","execCommand","uploadBoardState","boardUploadString","state","uploadBoard","setBoardString","setState","inherits","createClass","_this2","_this$props","changeHeight","changeWidth","boardString","JSON","stringify","TitledContainer_TitledContainer_TitledContainer","CenteredRow_CenteredRow","StyledInput_StyledInput_StyledInput","onBlur","placeholder","StyledButton_StyledButton_StyledButton","ref","readOnly","position","top","encodeURIComponent","download","game","React","Component","TestSnake","sendBoard","url","fetch","method","headers","then","res","json","move","response","window","addEventListener","tagName","_this3","_this$state","ColourSquare","FoodControl","selectFood","foodCount","ColourSquare_ColourSquare_ColourSquare","SnakeControl","health","selectSnake","changeHealth","YouControl","selectYou","SnakeControl_SnakeControl_SnakeControl","OtherSnakesControl","addSnake","changeSnakeHealth","minHeight","flexDirection","margin","_selectSnake","App","findExistingCell","findIndex","item","find","checkIfCellConnected","abs","selectCell","_this$state2","mode","chosenId","existingIndex","foundId","splice","matchingSnake","unshift","buildBoardState","turn","targetSnakeId","_this$state3","targetSnake","changeBoardHeight","changeBoardWidth","uploadedState","parse","e","alert","_this$state4","YouControl_YouControl","OtherSnakesControl_OtherSnakesControl","FoodControl_FoodControl","BoardControls_BoardControls","TestSnake_TestSnake","marginLeft","board_Board","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4fdcc627.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./CellComponent.css\";\r\n\r\nexport interface ICell {\r\n  onChange?: () => void;\r\n  colour?: string;\r\n  isHead?: boolean\r\n}\r\n\r\nexport const CellComponent: React.SFC<ICell> = ({ colour, onChange, isHead }) => (\r\n  <button className=\"cell\" style={{ backgroundColor: colour ? colour : \"#d4d4d4\" }} onClick={onChange}>\r\n    <span>{isHead && \"*\"}</span>\r\n  </button>\r\n);","import React from \"react\";\r\nimport { IBoardState } from \"../types/IBoardState.interface\";\r\nimport { ISnake } from \"../types/ISnake.interface\";\r\nimport { CellComponent } from \"./CellComponent/CellComponent\";\r\n\r\nexport interface IBoard {\r\n  boardState: IBoardState,\r\n  onChange: (x: number, y: number, id: string) => void;\r\n}\r\n\r\nexport const Board = ({ boardState, onChange }: IBoard) => (\r\n  <div style={{marginTop: 10}}>\r\n    {generateBoard(boardState, onChange).map((column, index) => <div key={index} style={{display: \"flex\"}}>{column.map(element => element)}</div>)}\r\n  </div>\r\n)\r\n\r\nconst generateBoard = (boardState: IBoardState, onChange: (x: number, y: number, id: string) => void) => {\r\n  const output: JSX.Element[][] = [];\r\n  const boardWithSnakes: {\r\n    colour: string;\r\n    isHead: boolean;\r\n    id: string;\r\n  }[][] = [];\r\n  boardState.board.snakes.concat(boardState.you).forEach(snake => {\r\n    snake.body.forEach((segment, index) => {\r\n      if (!boardWithSnakes[segment.x]) {\r\n        boardWithSnakes[segment.x] = [];\r\n      }\r\n      boardWithSnakes[segment.x][segment.y] = {\r\n        colour: snake.name,\r\n        id: snake.id,\r\n        isHead: index === 0\r\n      };\r\n    })\r\n  })\r\n\r\n  for (let y = 0; y < boardState.board.height; y++) {\r\n    output.push([]);\r\n    for (let x = 0; x < boardState.board.width; x++) {\r\n      let snakePiece: {\r\n        colour: string;\r\n        isHead: boolean;\r\n        id: string;\r\n      } | undefined = boardWithSnakes[x] && boardWithSnakes[x][y] ? boardWithSnakes[x][y] : undefined;\r\n\r\n      if (boardState.board.food.some(food => food.x === x && food.y === y)) {\r\n        output[y].push(<CellComponent key={`${x},${y}`} colour=\"orange\" onChange={() => onChange(x, y, \"food\")} />)\r\n      } else if (snakePiece !== undefined) {\r\n        let id: string = snakePiece.id;\r\n        output[y].push(<CellComponent key={`${x},${y}`} colour={snakePiece.colour} isHead={snakePiece.isHead} onChange={() => onChange(x, y, id)} />)\r\n      } else {\r\n        output[y].push(<CellComponent key={`${x},${y}`} onChange={() => onChange(x, y, \"\")} />)\r\n      }\r\n    }\r\n  }\r\n  return output;\r\n}","import React from \"react\";\r\nimport \"./TitledContainer.css\";\r\n\r\ninterface ITitledContainer {\r\n  title: string;\r\n}\r\n\r\nexport const TitledContainer: React.SFC<ITitledContainer> = ({ title, children }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"titled-container\">\r\n        <p className=\"container-title\">{title}</p>\r\n        {children}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import React from \"react\";\r\nimport \"./StyledInput.css\";\r\n\r\nexport const StyledInput: React.SFC<React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>> = props => {\r\n  return <div className=\"styled-input\">\r\n    {props.title && <span className=\"input-title\">{props.title}:</span>}\r\n    <input type=\"text\" {...props} />\r\n  </div>\r\n}","import React from \"react\";\r\n\r\nexport const generateColour: () => string = () => {\r\n  var max = 0xffffff;\r\n  return '#' + Math.round(Math.random() * max).toString(16);\r\n}\r\n\r\nexport const onChangeNumberLimitFactory = (target: (...arg: any) => void, max: number = 1000, min: number = 0) => {\r\n  return (event: React.ChangeEvent<HTMLInputElement>, ) => {\r\n    let value = event.target.value;\r\n\r\n    if (/[\\D]/.test(value)) {\r\n      return;\r\n    }\r\n    if (parseInt(value, 10) > max) {\r\n      value = max.toString();\r\n    }\r\n    if (parseInt(value, 10) < min) {\r\n      value = min.toString();\r\n    }\r\n    target(value);\r\n  }\r\n}\r\n\r\nexport const onBlurSetMinimumFactory = (target: (...arg: any) => void, min: number = 0) => {\r\n  return (event: React.FocusEvent<HTMLInputElement>, ) => {\r\n    let value = event.target.value;\r\n\r\n    if (/[\\D]/.test(value)) {\r\n      return;\r\n    }\r\n    if (parseInt(value, 10) < min || !value) {\r\n      value = min.toString();\r\n    }\r\n    target(value);\r\n  }\r\n}\r\n\r\nexport const generateId = () => Math.floor((Math.random() * 1000000)).toString()","import React from \"react\";\r\nimport \"./StyledButton.css\";\r\n\r\nexport const StyledButton: React.SFC<React.ButtonHTMLAttributes<{}> & React.AnchorHTMLAttributes<{}>> = (props) => {\r\n  if (props.href) {\r\n    return <a {...props}>\r\n      <button tabIndex={-1} className=\"styled-button\">\r\n        {props.children}\r\n      </button>\r\n    </a>\r\n  } else {\r\n    return <button className=\"styled-button\" {...props}>{props.children}</button>\r\n  }\r\n}","import React from \"react\";\r\n\r\nexport const CenteredRow: React.SFC<React.HTMLAttributes<{}>> = (props) => <div style={{ display: \"flex\", alignItems: 'center', marginTop: \"5px\", marginBottom: \"5px\", flexWrap: \"wrap\", ...props.style }}>{props.children}</div>","import React from \"react\";\r\nimport { StyledInput } from \"../StyledInput/StyledInput\";\r\nimport { onChangeNumberLimitFactory, onBlurSetMinimumFactory } from \"../../shared/utils\";\r\nimport { StyledButton } from \"../StyledButton/StyledButton\";\r\nimport { CenteredRow } from \"../CenteredRow/CenteredRow\";\r\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\r\nimport { IBoardState } from \"../../types/IBoardState.interface\";\r\n\r\nexport interface IBoardControls {\r\n  height: string;\r\n  width: string;\r\n  changeHeight: (value: string) => void;\r\n  changeWidth: (value: string) => void;\r\n  uploadBoard: (value: string) => void;\r\n  boardState: IBoardState;\r\n}\r\n\r\ninterface IBoardControlsState {\r\n  boardUploadString: string;\r\n}\r\n\r\nexport class BoardControls extends React.Component<IBoardControls, IBoardControlsState> {\r\n\r\n  private boardCopyInput: HTMLInputElement | null = null;\r\n\r\n  constructor(props: IBoardControls) {\r\n    super(props);\r\n    this.state = {\r\n      boardUploadString: \"\"\r\n    }\r\n  }\r\n\r\n  public copyBoardState = () => {\r\n    if (!this.boardCopyInput) {\r\n      return;\r\n    }\r\n    this.boardCopyInput.select();\r\n    document.execCommand(\"copy\");\r\n  }\r\n\r\n  public uploadBoardState = () => {\r\n    const { boardUploadString } = this.state;\r\n    const { uploadBoard } = this.props;\r\n    uploadBoard(boardUploadString);\r\n  }\r\n\r\n  public setBoardString = (value: string) => this.setState({ boardUploadString: value });\r\n\r\n  render() {\r\n    const { height, width, changeHeight, changeWidth, uploadBoard, boardState } = this.props;\r\n    const boardString: string = JSON.stringify(boardState);\r\n    return (\r\n      <TitledContainer title=\"Board\">\r\n        <CenteredRow>\r\n          <StyledInput title=\"Height\" value={height} onBlur={onBlurSetMinimumFactory(changeHeight, 1)} onChange={onChangeNumberLimitFactory(changeHeight)} />\r\n          <StyledInput title=\"Width\" value={width} onBlur={onBlurSetMinimumFactory(changeWidth, 1)} onChange={onChangeNumberLimitFactory(changeWidth)} />\r\n        </CenteredRow>\r\n        <CenteredRow>\r\n          <StyledInput placeholder=\"Past Board Here\" onChange={event => this.setBoardString(event.target.value)} />\r\n          <StyledButton onClick={this.uploadBoardState}>Upload</StyledButton>\r\n        </CenteredRow>\r\n        <CenteredRow>\r\n          <StyledButton onClick={this.copyBoardState}>Copy Board State</StyledButton>\r\n          <input tabIndex={-1} ref={ref => this.boardCopyInput = ref} type=\"text\" readOnly value={boardString} style={{ position: \"absolute\", top: -10000 }} />\r\n          <StyledButton href={\"data:text/json;charset=utf-8,\" + encodeURIComponent(boardString)} download={`board-${boardState.game.id}.json`}>Download Board State</StyledButton>\r\n        </CenteredRow>\r\n      </TitledContainer>\r\n    )\r\n\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { IBoardState } from \"../../types/IBoardState.interface\";\r\nimport { StyledButton } from \"../StyledButton/StyledButton\";\r\nimport { CenteredRow } from \"../CenteredRow/CenteredRow\";\r\nimport { StyledInput } from \"../StyledInput/StyledInput\";\r\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\r\nimport { IBoardMove } from \"../../types/IBoardMove\";\r\n\r\nexport interface ITestSnakeProps {\r\n  boardState: IBoardState;\r\n}\r\n\r\ninterface ITestSnakeState {\r\n  url: string;\r\n  response?: string;\r\n}\r\n\r\nexport class TestSnake extends React.Component<ITestSnakeProps, ITestSnakeState> {\r\n\r\n  constructor(props: ITestSnakeProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      url: \"http://localhost:5000\"\r\n    }\r\n  }\r\n\r\n  public componentDidMount() {\r\n    window.addEventListener(\"keypress\", (event) => {\r\n      if (event.key === \" \" && (!event.target || (event.target as any).tagName !== \"INPUT\")) {\r\n        this.sendBoard();\r\n      }\r\n    });\r\n  }\r\n\r\n  public sendBoard = () => {\r\n\r\n    const { boardState } = this.props;\r\n    const { url } = this.state;\r\n\r\n    fetch(url, {\r\n      body: JSON.stringify(boardState),\r\n      method: \"POST\",\r\n      headers: [\r\n        [\"content-type\", \"application/json\"]\r\n      ]\r\n    }).then(res => res.json()).then((move: IBoardMove) => this.setState({ response: move.move }));\r\n  }\r\n\r\n  public render() {\r\n\r\n    const { response, url } = this.state;\r\n\r\n    return (\r\n      <TitledContainer title=\"Test Snake\">\r\n        <CenteredRow>\r\n          <StyledInput title=\"URL\" value={url} onChange={event => this.setState({ url: event.target.value })} />\r\n          {response && <span>Move: {response}</span>}\r\n        </CenteredRow>\r\n        <CenteredRow>\r\n          <StyledButton onClick={this.sendBoard}>Ping Snake</StyledButton>\r\n        </CenteredRow>\r\n      </TitledContainer>\r\n    )\r\n  }\r\n\r\n}","import React from \"react\";\r\nimport \"./ColourSquare.css\";\r\n\r\nexport const ColourSquare: React.SFC<{ colour: string }> = ({ colour }) => <div className=\"colour-cell\" style={{ backgroundColor: colour }} />","import React from \"react\";\r\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\r\nimport { CenteredRow } from \"../CenteredRow/CenteredRow\";\r\nimport { StyledButton } from \"../StyledButton/StyledButton\";\r\nimport { ColourSquare } from \"../ColourSquare/ColourSquare\";\r\n\r\nexport const FoodControl: React.SFC<{ selectFood: () => void, foodCount: number }> = ({selectFood, foodCount }) => (\r\n\r\n  <TitledContainer title=\"Food\">\r\n    <CenteredRow>\r\n      <StyledButton onClick={selectFood}>\r\n        <ColourSquare colour=\"orange\" />\r\n      </StyledButton>\r\n      <span>Food Count: {foodCount}</span>\r\n    </CenteredRow>\r\n  </TitledContainer>\r\n)","import React from \"react\";\r\nimport \"./SnakeControl.css\";\r\nimport { StyledInput } from \"../StyledInput/StyledInput\";\r\nimport { StyledButton } from \"../StyledButton/StyledButton\";\r\nimport { onChangeNumberLimitFactory, onBlurSetMinimumFactory } from \"../../shared/utils\";\r\nimport { ColourSquare } from \"../ColourSquare/ColourSquare\";\r\n\r\nexport interface ISnakeControl {\r\n  colour: string;\r\n  health: string;\r\n  selectSnake: () => void;\r\n  changeHealth: (value: string) => void;\r\n  title?: string;\r\n}\r\n\r\nexport class SnakeControl extends React.Component<ISnakeControl, {}> {\r\n\r\n  render() {\r\n\r\n    const { colour, health, selectSnake, title, changeHealth } = this.props;\r\n\r\n    return (\r\n      <div className=\"snake-control-container\">\r\n        <StyledButton onClick={selectSnake}>\r\n          <ColourSquare colour={colour} />\r\n        </StyledButton>\r\n        <div className=\"vertical-flex-container\">\r\n          <span>{colour}</span>\r\n          <div>\r\n            <StyledInput title=\"Health\" value={health} onBlur={onBlurSetMinimumFactory(changeHealth)} onChange={onChangeNumberLimitFactory(changeHealth, 100)} />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { SnakeControl } from \"../SnakeControl/SnakeControl\";\r\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\r\n\r\nexport interface IYouControl {\r\n  selectYou: () => void;\r\n  colour: string;\r\n  health: string;\r\n  changeHealth: (health: string) => void;\r\n}\r\n\r\nexport const YouControl: React.SFC<IYouControl> = ({ selectYou, colour, health, changeHealth, }) => (\r\n  <TitledContainer title=\"You\">\r\n    <SnakeControl selectSnake={selectYou} colour={colour} health={health} changeHealth={changeHealth} />\r\n  </TitledContainer>\r\n);","import React from \"react\";\r\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\r\nimport { SnakeControl } from \"../SnakeControl/SnakeControl\";\r\nimport { StyledButton } from \"../StyledButton/StyledButton\";\r\nimport { ICoordinate } from \"../../types/ICoordinate.type\";\r\n\r\nexport interface IOtherSnakesControl {\r\n  selectSnake: (id: string) => void;\r\n  snakes: {\r\n    id: string;\r\n    colour: string;\r\n    body: ICoordinate[];\r\n    health: string;\r\n  }[];\r\n  addSnake: () => void;\r\n  changeSnakeHealth: (value: string, target: string) => void;\r\n}\r\n\r\nexport const OtherSnakesControl: React.SFC<IOtherSnakesControl> = ({selectSnake, snakes, addSnake, changeSnakeHealth}) => (\r\n  <TitledContainer title=\"Other Snakes\">\r\n    <div style={{ minHeight: \"68px\" }}>\r\n      {snakes.map(snake =>\r\n        <div key={snake.colour} style={{ display: \"inline-flex\", flexDirection: \"column\", alignItems: \"center\", margin: \"5px\" }}>\r\n          <SnakeControl selectSnake={() => selectSnake(snake.id)} colour={snake.colour || \"\"} health={snake.health} title={snake.colour} changeHealth={(value) => changeSnakeHealth(value, snake.id)} />\r\n        </div>\r\n      )}\r\n    </div>\r\n    <StyledButton onClick={addSnake}>Add Snake</StyledButton>\r\n  </TitledContainer>\r\n)","import React, { Component, Ref } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { IBoardState } from './types/IBoardState.interface';\r\nimport { Board } from './components/board';\r\nimport { ICoordinate } from './types/ICoordinate.type';\r\nimport { SnakeControl } from './components/SnakeControl/SnakeControl';\r\nimport { IBoardMove } from './types/IBoardMove';\r\nimport { TitledContainer } from './components/TitledContainer/TitledContainer';\r\nimport { BoardControls } from './components/BoardControls/BoardControls';\r\nimport { StyledButton } from './components/StyledButton/StyledButton';\r\nimport { generateColour, generateId } from './shared/utils';\r\nimport { TestSnake } from './components/TestSnake/TestSnake';\r\nimport { CenteredRow } from './components/CenteredRow/CenteredRow';\r\nimport { ColourSquare } from './components/ColourSquare/ColourSquare';\r\nimport { FoodControl } from './components/FoodControl/FoodControl';\r\nimport { YouControl } from './components/YouControl/YouControl';\r\nimport { OtherSnakesControl } from './components/OtherSnakesControl/OtherSnakesControl';\r\n\r\ninterface IAppState {\r\n  id: string;\r\n  height: string;\r\n  width: string;\r\n  food: ICoordinate[];\r\n  snakes: {\r\n    id: string;\r\n    colour: string;\r\n    body: ICoordinate[];\r\n    health: string;\r\n  }[];\r\n  you: {\r\n    colour: string;\r\n    body: ICoordinate[];\r\n    health: string;\r\n    id: \"you\";\r\n  };\r\n  mode: \"food\" | \"you\" | \"snake\";\r\n  chosenId: string;\r\n}\r\n\r\nclass App extends Component<{}, IAppState> {\r\n\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      id: generateId(),\r\n      height: \"15\",\r\n      width: \"15\",\r\n      food: [],\r\n      snakes: [],\r\n      you: {\r\n        colour: \"#22aa34\",\r\n        body: [],\r\n        health: \"100\",\r\n        id: \"you\"\r\n      },\r\n      mode: \"food\",\r\n      chosenId: \"\"\r\n    }\r\n  }\r\n\r\n  private findExistingCell = (id: string, x: number, y: number) => {\r\n    const { food, you, snakes } = this.state;\r\n\r\n    switch (id) {\r\n      case \"food\":\r\n        return {\r\n          id: \"food\",\r\n          index: food.findIndex(item => item.x === x && item.y === y)\r\n        };\r\n      case \"you\":\r\n        return {\r\n          id: \"you\",\r\n          index: you.body.findIndex(item => item.x === x && item.y === y)\r\n        };\r\n      case undefined:\r\n        return undefined;\r\n      default:\r\n        const snake = snakes.find(snake => snake.id === id);\r\n        if (snake) {\r\n          return {\r\n            id: id,\r\n            index: snake.body.findIndex(item => item.x === x && item.y === y)\r\n          };\r\n        }\r\n    }\r\n  }\r\n\r\n  private checkIfCellConnected: (x: number, y: number, body: ICoordinate[]) => boolean = (x, y, body) => {\r\n    return body.some(segment => (Math.abs(segment.x - x) === 1 && segment.y === y) || (Math.abs(segment.y - y) === 1 && segment.x === x));\r\n  }\r\n\r\n  public selectCell = (x: number, y: number, id: string) => {\r\n\r\n    const { mode, food, you, snakes, chosenId } = this.state;\r\n    let existingIndex: {\r\n      id: string;\r\n      index: number;\r\n    } | undefined = this.findExistingCell(id, x, y);\r\n\r\n    if (existingIndex) {\r\n\r\n      const foundId: string = existingIndex.id;\r\n\r\n      switch (foundId) {\r\n        case \"food\":\r\n          food.splice(existingIndex.index, 1);\r\n          break;\r\n        case \"you\":\r\n          you.body.splice(existingIndex.index);\r\n          break;\r\n        default:\r\n          const matchingSnake = snakes.find(snake => snake.id === foundId);\r\n          if (matchingSnake) {\r\n            matchingSnake.body.splice(existingIndex.index)\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (!existingIndex || (existingIndex.id !== mode && existingIndex.id !== chosenId)) {\r\n      switch (mode) {\r\n        case \"food\":\r\n          food.push({ x, y });\r\n          break;\r\n        case \"you\":\r\n          if (you.body.length === 0 || this.checkIfCellConnected(x, y, you.body)) {\r\n            you.body.unshift({ x, y });\r\n          }\r\n          break;\r\n        case \"snake\":\r\n          const matchingSnake = snakes.find(snake => snake.id === chosenId);\r\n          if (!matchingSnake) {\r\n            return;\r\n          }\r\n          if (matchingSnake.body.length === 0 || this.checkIfCellConnected(x, y, matchingSnake.body)) {\r\n            matchingSnake.body.unshift({ x, y });\r\n          }\r\n          break;\r\n      }\r\n    }\r\n\r\n    this.setState({ mode, food, you, snakes, chosenId });\r\n  }\r\n\r\n  private buildBoardState: () => IBoardState = () => {\r\n    return {\r\n      game: {\r\n        id: this.state.id\r\n      },\r\n      turn: 200,\r\n      you: {\r\n        health: parseInt(this.state.you.health, 10),\r\n        id: \"you\",\r\n        name: this.state.you.colour,\r\n        body: this.state.you.body\r\n      },\r\n      board: {\r\n        food: this.state.food,\r\n        height: parseInt(this.state.height, 10),\r\n        width: parseInt(this.state.width, 10),\r\n        snakes: [{\r\n          health: parseInt(this.state.you.health, 10),\r\n          id: \"you\",\r\n          name: this.state.you.colour,\r\n          body: this.state.you.body\r\n        }].concat(this.state.snakes.map(snake => ({\r\n          health: parseInt(snake.health, 10),\r\n          id: snake.id,\r\n          name: snake.colour,\r\n          body: snake.body\r\n        })))\r\n      }\r\n    }\r\n  }\r\n\r\n  public addSnake = () => {\r\n    const colour = generateColour();\r\n    const { snakes } = this.state;\r\n    snakes.push({\r\n      body: [],\r\n      colour: colour,\r\n      health: \"100\",\r\n      id: colour\r\n    });\r\n\r\n    this.setState({ snakes })\r\n  }\r\n\r\n  public selectSnake = (id: string) => {\r\n    this.setState({\r\n      mode: \"snake\",\r\n      chosenId: id\r\n    });\r\n  }\r\n\r\n  public selectFood = () => {\r\n    this.setState({\r\n      mode: \"food\",\r\n      chosenId: \"\"\r\n    });\r\n  }\r\n\r\n  public selectYou = () => {\r\n    this.setState({\r\n      mode: \"you\",\r\n      chosenId: \"\"\r\n    });\r\n  }\r\n\r\n  public changeSnakeHealth = (health: string, targetSnakeId: \"you\" | string) => {\r\n    const { you, snakes } = this.state;\r\n\r\n    if (targetSnakeId === \"you\") {\r\n      you.health = health;\r\n      this.setState({ you });\r\n      return;\r\n    } else {\r\n      const targetSnake = snakes.find(snake => snake.id === targetSnakeId);\r\n      if (targetSnake) {\r\n        targetSnake.health = health;\r\n        this.setState({ snakes });\r\n      }\r\n    }\r\n  }\r\n\r\n  public changeBoardHeight = (height: string) => this.setState({ height });\r\n\r\n  public changeBoardWidth = (width: string) => this.setState({ width });\r\n\r\n  public uploadBoard = (board: string) => {\r\n    try {\r\n      const uploadedState: IBoardState = JSON.parse(board);\r\n      this.setState({\r\n        id: generateId(),\r\n        height: uploadedState.board.height.toString(),\r\n        width: uploadedState.board.width.toString(),\r\n        food: uploadedState.board.food,\r\n        snakes: uploadedState.board.snakes.map(snake => {\r\n          const colour: string = generateColour();\r\n          return {\r\n            id: colour,\r\n            colour: colour,\r\n            body: snake.body,\r\n            health: snake.health.toString(),\r\n          }\r\n        }),\r\n        you: {\r\n          colour: \"#22aa34\",\r\n          body: uploadedState.you.body,\r\n          health: uploadedState.you.health.toString(),\r\n          id: \"you\"\r\n        },\r\n        mode: \"food\",\r\n        chosenId: \"\"\r\n      });\r\n    } catch (e) {\r\n      alert(\"That didn't work\");\r\n    }\r\n  }\r\n\r\n  render() {\r\n\r\n    const { height, width, snakes, you, food, mode, chosenId } = this.state;\r\n\r\n    return (\r\n      <div className=\"App\">\r\n        <div className=\"control-container\">\r\n          <YouControl selectYou={this.selectYou} colour={you.colour} health={you.health} changeHealth={(value) => this.changeSnakeHealth(value, \"you\")} />\r\n          <OtherSnakesControl addSnake={this.addSnake} changeSnakeHealth={this.changeSnakeHealth} selectSnake={this.selectSnake} snakes={snakes} />\r\n          <FoodControl foodCount={food.length} selectFood={this.selectFood} />\r\n          <BoardControls\r\n            boardState={this.buildBoardState()}\r\n            changeHeight={this.changeBoardHeight}\r\n            changeWidth={this.changeBoardWidth}\r\n            height={height}\r\n            width={width}\r\n            uploadBoard={this.uploadBoard}\r\n          />\r\n          <TestSnake boardState={this.buildBoardState()} />\r\n        </div>\r\n        <div style={{ display: \"flex\", alignItems: \"center\", flexDirection: \"column\" }}>\r\n          <TitledContainer title=\"Current Mode\">\r\n            <div className=\"current-mode\">\r\n              <ColourSquare colour={mode === \"food\" ? \"orange\" : mode === \"you\" ? \"#22aa34\" : chosenId} />\r\n              <span style={{ marginLeft: 10 }}>{mode !== \"snake\" ? mode : chosenId}</span>\r\n            </div>\r\n          </TitledContainer>\r\n          <Board boardState={this.buildBoardState()} onChange={this.selectCell} />\r\n          <TitledContainer title=\"Keyboard Shortcuts\">\r\n            <p>Spacebar: Ping Snake</p>\r\n          </TitledContainer>\r\n        </div>\r\n        <div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}