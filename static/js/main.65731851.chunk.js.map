{"version":3,"sources":["components/CellComponent/CellComponent.tsx","components/board.tsx","components/TitledContainer/TitledContainer.tsx","components/StyledInput/StyledInput.tsx","shared/utils.tsx","components/StyledButton/StyledButton.tsx","components/CenteredRow/CenteredRow.tsx","components/BoardControls/BoardControls.tsx","components/TestSnake/TestSnake.tsx","components/ColourSquare/ColourSquare.tsx","components/FoodControl/FoodControl.tsx","components/SnakeControl/SnakeControl.tsx","components/YouControl/YouControl.tsx","components/OtherSnakesControl/OtherSnakesControl.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CellComponent","_ref","colour","onChange","isHead","react_default","a","createElement","className","style","backgroundColor","onClick","Board","boardState","marginTop","generateBoard","map","column","index","key","display","element","output","boardWithSnakes","board","snakes","concat","you","forEach","snake","body","segment","x","y","name","id","height","push","_loop","_loop2","snakePiece","undefined","food","some","CellComponent_CellComponent_CellComponent","_onChange","apply","this","arguments","toString","_onChange2","_onChange3","width","TitledContainer","title","children","StyledInput","props","Object","assign","type","generateColour","Math","round","random","onChangeNumberLimitFactory","target","max","length","min","event","value","test","parseInt","onBlurSetMinimumFactory","generateId","floor","StyledButton","href","tabIndex","CenteredRow","objectSpread","alignItems","marginBottom","flexWrap","BoardControls","_React$Component","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","boardCopyInput","copyBoardState","select","document","execCommand","uploadBoardState","boardUploadString","state","uploadBoard","setBoardString","setState","inherits","createClass","_this2","_this$props","changeHeight","changeWidth","boardString","JSON","stringify","TitledContainer_TitledContainer_TitledContainer","CenteredRow_CenteredRow","StyledInput_StyledInput_StyledInput","onBlur","placeholder","StyledButton_StyledButton_StyledButton","ref","readOnly","position","top","encodeURIComponent","download","game","React","Component","TestSnake","sendBoard","url","fetch","method","headers","then","res","json","move","response","window","addEventListener","tagName","_this3","_this$state","ColourSquare","FoodControl","selectFood","foodCount","ColourSquare_ColourSquare_ColourSquare","SnakeControl","health","selectSnake","changeHealth","YouControl","selectYou","SnakeControl_SnakeControl_SnakeControl","OtherSnakesControl","addSnake","changeSnakeHealth","minHeight","flexDirection","margin","_selectSnake","App","findExistingCell","findIndex","item","find","checkIfCellConnected","abs","selectCell","_this$state2","mode","chosenId","existingIndex","foundId","splice","matchingSnake","unshift","buildBoardState","ruleset","version","timeout","turn","head","targetSnakeId","_this$state3","targetSnake","changeBoardHeight","changeBoardWidth","uploadedState","parse","filter","e","alert","_this$state4","YouControl_YouControl","OtherSnakesControl_OtherSnakesControl","FoodControl_FoodControl","BoardControls_BoardControls","TestSnake_TestSnake","marginLeft","board_Board","Boolean","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.65731851.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./CellComponent.css\";\n\nexport interface ICell {\n  onChange?: () => void;\n  colour?: string;\n  isHead?: boolean\n}\n\nexport const CellComponent: React.SFC<ICell> = ({ colour, onChange, isHead }) => (\n  <button className=\"cell\" style={{ backgroundColor: colour ? colour : \"#d4d4d4\" }} onClick={onChange}>\n    <span>{isHead && \"H\"}</span>\n  </button>\n);","import React from \"react\";\nimport { IBoardState } from \"../types/IBoardState.interface\";\nimport { ISnake } from \"../types/ISnake.interface\";\nimport { CellComponent } from \"./CellComponent/CellComponent\";\n\nexport interface IBoard {\n  boardState: IBoardState,\n  onChange: (x: number, y: number, id: string) => void;\n}\n\nexport const Board = ({ boardState, onChange }: IBoard) => (\n  <div style={{marginTop: 10}}>\n    {generateBoard(boardState, onChange).map((column, index) => <div key={index} style={{display: \"flex\"}}>{column.map(element => element)}</div>)}\n  </div>\n)\n\nconst generateBoard = (boardState: IBoardState, onChange: (x: number, y: number, id: string) => void) => {\n  const output: JSX.Element[][] = [];\n  const boardWithSnakes: {\n    colour: string;\n    isHead: boolean;\n    id: string;\n  }[][] = [];\n  boardState.board.snakes.concat(boardState.you).forEach(snake => {\n    snake.body.forEach((segment, index) => {\n      if (!boardWithSnakes[segment.x]) {\n        boardWithSnakes[segment.x] = [];\n      }\n      boardWithSnakes[segment.x][segment.y] = {\n        colour: snake.name,\n        id: snake.id,\n        isHead: index === 0\n      };\n    })\n  })\n\n  for (let y = boardState.board.height -1 ; y >= 0 ; y--) {\n    output.push([]);\n  }\n\n  for (let y = boardState.board.height -1 ; y >= 0 ; y--) {\n    \n    for (let x = 0; x < boardState.board.width; x++) {\n      let snakePiece: {\n        colour: string;\n        isHead: boolean;\n        id: string;\n      } | undefined = boardWithSnakes[x] && boardWithSnakes[x][y] ? boardWithSnakes[x][y] : undefined;\n\n      if (boardState.board.food.some(food => food.x === x && food.y === y)) {\n        output[boardState.board.height -1 - y].push(<CellComponent key={`${x},${boardState.board.height -1 - y}`} colour=\"orange\" onChange={() => onChange(x, y, \"food\")} />)\n      } else if (snakePiece !== undefined) {\n        let id: string = snakePiece.id;\n        output[boardState.board.height -1 - y].push(<CellComponent key={`${x},${boardState.board.height -1 - y}`} colour={snakePiece.colour} isHead={snakePiece.isHead} onChange={() => onChange(x,  y, id)} />)\n      } else {\n        output[boardState.board.height -1 -y].push(<CellComponent key={`${x},${boardState.board.height -1 - y}`} onChange={() => onChange(x,  y, \"\")} />)\n      }\n    }\n  }\n  return output;\n}","import React from \"react\";\nimport \"./TitledContainer.css\";\n\ninterface ITitledContainer {\n  title: string;\n}\n\nexport const TitledContainer: React.SFC<ITitledContainer> = ({ title, children }) => {\n  return (\n    <div>\n      <div className=\"titled-container\">\n        <p className=\"container-title\">{title}</p>\n        {children}\n      </div>\n    </div>\n  )\n}","import React from \"react\";\nimport \"./StyledInput.css\";\n\nexport const StyledInput: React.SFC<React.DetailedHTMLProps<React.InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>> = props => {\n  return <div className=\"styled-input\">\n    {props.title && <span className=\"input-title\">{props.title}:</span>}\n    <input type=\"text\" {...props} />\n  </div>\n}","import React from \"react\";\n\nexport const generateColour: () => string = () => {\n  var max = 0xffff;\n  return '#FF' + Math.round(Math.random() * max).toString(16);\n}\n\nexport const onChangeNumberLimitFactory = (target: (...arg: any) => void, max: number = 1000, min: number = 0) => {\n  return (event: React.ChangeEvent<HTMLInputElement>, ) => {\n    let value = event.target.value;\n\n    if (/[\\D]/.test(value)) {\n      return;\n    }\n    if (parseInt(value, 10) > max) {\n      value = max.toString();\n    }\n    if (parseInt(value, 10) < min) {\n      value = min.toString();\n    }\n    target(value);\n  }\n}\n\nexport const onBlurSetMinimumFactory = (target: (...arg: any) => void, min: number = 0) => {\n  return (event: React.FocusEvent<HTMLInputElement>, ) => {\n    let value = event.target.value;\n\n    if (/[\\D]/.test(value)) {\n      return;\n    }\n    if (parseInt(value, 10) < min || !value) {\n      value = min.toString();\n    }\n    target(value);\n  }\n}\n\nexport const generateId = () => Math.floor((Math.random() * 1000000)).toString()","import React from \"react\";\nimport \"./StyledButton.css\";\n\nexport const StyledButton: React.SFC<React.ButtonHTMLAttributes<{}> & React.AnchorHTMLAttributes<{}>> = (props) => {\n  if (props.href) {\n    return <a {...props}>\n      <button tabIndex={-1} className=\"styled-button\">\n        {props.children}\n      </button>\n    </a>\n  } else {\n    return <button className=\"styled-button\" {...props}>{props.children}</button>\n  }\n}","import React from \"react\";\n\nexport const CenteredRow: React.SFC<React.HTMLAttributes<{}>> = (props) => <div style={{ display: \"flex\", alignItems: 'center', marginTop: \"5px\", marginBottom: \"5px\", flexWrap: \"wrap\", ...props.style }}>{props.children}</div>","import React from \"react\";\nimport { StyledInput } from \"../StyledInput/StyledInput\";\nimport { onChangeNumberLimitFactory, onBlurSetMinimumFactory } from \"../../shared/utils\";\nimport { StyledButton } from \"../StyledButton/StyledButton\";\nimport { CenteredRow } from \"../CenteredRow/CenteredRow\";\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\nimport { IBoardState } from \"../../types/IBoardState.interface\";\n\nexport interface IBoardControls {\n  height: string;\n  width: string;\n  changeHeight: (value: string) => void;\n  changeWidth: (value: string) => void;\n  uploadBoard: (value: string) => void;\n  boardState: IBoardState;\n}\n\ninterface IBoardControlsState {\n  boardUploadString: string;\n}\n\nexport class BoardControls extends React.Component<IBoardControls, IBoardControlsState> {\n\n  private boardCopyInput: HTMLInputElement | null = null;\n\n  constructor(props: IBoardControls) {\n    super(props);\n    this.state = {\n      boardUploadString: \"\"\n    }\n  }\n\n  public copyBoardState = () => {\n    if (!this.boardCopyInput) {\n      return;\n    }\n    this.boardCopyInput.select();\n    document.execCommand(\"copy\");\n  }\n\n  public uploadBoardState = () => {\n    const { boardUploadString } = this.state;\n    const { uploadBoard } = this.props;\n    uploadBoard(boardUploadString);\n  }\n\n  public setBoardString = (value: string) => this.setState({ boardUploadString: value });\n\n  render() {\n    const { height, width, changeHeight, changeWidth, uploadBoard, boardState } = this.props;\n    const boardString: string = JSON.stringify(boardState);\n    return (\n      <TitledContainer title=\"Board\">\n        <CenteredRow>\n          <StyledInput title=\"Height\" value={height} onBlur={onBlurSetMinimumFactory(changeHeight, 1)} onChange={onChangeNumberLimitFactory(changeHeight)} />\n          <StyledInput title=\"Width\" value={width} onBlur={onBlurSetMinimumFactory(changeWidth, 1)} onChange={onChangeNumberLimitFactory(changeWidth)} />\n        </CenteredRow>\n        <CenteredRow>\n          <StyledInput placeholder=\"Past Board Here\" onChange={event => this.setBoardString(event.target.value)} />\n          <StyledButton onClick={this.uploadBoardState}>Upload</StyledButton>\n        </CenteredRow>\n        <CenteredRow>\n          <StyledButton onClick={this.copyBoardState}>Copy Board State</StyledButton>\n          <input tabIndex={-1} ref={ref => this.boardCopyInput = ref} type=\"text\" readOnly value={boardString} style={{ position: \"absolute\", top: -10000 }} />\n          <StyledButton href={\"data:text/json;charset=utf-8,\" + encodeURIComponent(boardString)} download={`board-${boardState.game.id}.json`}>Download Board State</StyledButton>\n        </CenteredRow>\n      </TitledContainer>\n    )\n\n  }\n}\n","import React from \"react\";\nimport { IBoardState } from \"../../types/IBoardState.interface\";\nimport { StyledButton } from \"../StyledButton/StyledButton\";\nimport { CenteredRow } from \"../CenteredRow/CenteredRow\";\nimport { StyledInput } from \"../StyledInput/StyledInput\";\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\nimport { IBoardMove } from \"../../types/IBoardMove\";\n\nexport interface ITestSnakeProps {\n  boardState: IBoardState;\n}\n\ninterface ITestSnakeState {\n  url: string;\n  response?: string;\n}\n\nexport class TestSnake extends React.Component<ITestSnakeProps, ITestSnakeState> {\n\n  constructor(props: ITestSnakeProps) {\n    super(props);\n\n    this.state = {\n      url: \"http://localhost:5000/move\"\n    }\n  }\n\n  public componentDidMount() {\n    window.addEventListener(\"keypress\", (event) => {\n      if (event.key === \" \" && (!event.target || (event.target as any).tagName !== \"INPUT\")) {\n        this.sendBoard();\n      }\n    });\n  }\n\n  public sendBoard = () => {\n\n    const { boardState } = this.props;\n    const { url } = this.state;\n\n    fetch(url, {\n      body: JSON.stringify(boardState),\n      method: \"POST\",\n      headers: [\n        [\"content-type\", \"application/json\"]\n      ]\n    }).then(res => res.json()).then((move: IBoardMove) => this.setState({ response: move.move }));\n  }\n\n  public render() {\n\n    const { response, url } = this.state;\n\n    return (\n      <TitledContainer title=\"Test Snake\">\n        <CenteredRow>\n          <StyledInput title=\"URL\" value={url} onChange={event => this.setState({ url: event.target.value })} />\n          {response && <span>Move: {response}</span>}\n        </CenteredRow>\n        <CenteredRow>\n          <StyledButton onClick={this.sendBoard}>Ping Snake</StyledButton>\n        </CenteredRow>\n      </TitledContainer>\n    )\n  }\n\n}","import React from \"react\";\nimport \"./ColourSquare.css\";\n\nexport const ColourSquare: React.SFC<{ colour: string }> = ({ colour }) => <div className=\"colour-cell\" style={{ backgroundColor: colour }} />","import React from \"react\";\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\nimport { CenteredRow } from \"../CenteredRow/CenteredRow\";\nimport { StyledButton } from \"../StyledButton/StyledButton\";\nimport { ColourSquare } from \"../ColourSquare/ColourSquare\";\n\nexport const FoodControl: React.SFC<{ selectFood: () => void, foodCount: number }> = ({selectFood, foodCount }) => (\n\n  <TitledContainer title=\"Food\">\n    <CenteredRow>\n      <StyledButton onClick={selectFood}>\n        <ColourSquare colour=\"orange\" />\n      </StyledButton>\n      <span>Food Count: {foodCount}</span>\n    </CenteredRow>\n  </TitledContainer>\n)","import React from \"react\";\nimport \"./SnakeControl.css\";\nimport { StyledInput } from \"../StyledInput/StyledInput\";\nimport { StyledButton } from \"../StyledButton/StyledButton\";\nimport { onChangeNumberLimitFactory, onBlurSetMinimumFactory } from \"../../shared/utils\";\nimport { ColourSquare } from \"../ColourSquare/ColourSquare\";\n\nexport interface ISnakeControl {\n  colour: string;\n  health: string;\n  selectSnake: () => void;\n  changeHealth: (value: string) => void;\n  title?: string;\n}\n\nexport class SnakeControl extends React.Component<ISnakeControl, {}> {\n\n  render() {\n\n    const { colour, health, selectSnake, title, changeHealth } = this.props;\n\n    return (\n      <div className=\"snake-control-container\">\n        <StyledButton onClick={selectSnake}>\n          <ColourSquare colour={colour} />\n        </StyledButton>\n        <div className=\"vertical-flex-container\">\n          <span>{colour}</span>\n          <div>\n            <StyledInput title=\"Health\" value={health} onBlur={onBlurSetMinimumFactory(changeHealth)} onChange={onChangeNumberLimitFactory(changeHealth, 100)} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport { SnakeControl } from \"../SnakeControl/SnakeControl\";\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\n\nexport interface IYouControl {\n  selectYou: () => void;\n  colour: string;\n  health: string;\n  changeHealth: (health: string) => void;\n}\n\nexport const YouControl: React.SFC<IYouControl> = ({ selectYou, colour, health, changeHealth, }) => (\n  <TitledContainer title=\"You\">\n    <SnakeControl selectSnake={selectYou} colour={colour} health={health} changeHealth={changeHealth} />\n  </TitledContainer>\n);","import React from \"react\";\nimport { TitledContainer } from \"../TitledContainer/TitledContainer\";\nimport { SnakeControl } from \"../SnakeControl/SnakeControl\";\nimport { StyledButton } from \"../StyledButton/StyledButton\";\nimport { ICoordinate } from \"../../types/ICoordinate.type\";\n\nexport interface IOtherSnakesControl {\n  selectSnake: (id: string) => void;\n  snakes: {\n    id: string;\n    colour: string;\n    body: ICoordinate[];\n    health: string;\n  }[];\n  addSnake: () => void;\n  changeSnakeHealth: (value: string, target: string) => void;\n}\n\nexport const OtherSnakesControl: React.SFC<IOtherSnakesControl> = ({selectSnake, snakes, addSnake, changeSnakeHealth}) => (\n  <TitledContainer title=\"Other Snakes\">\n    <div style={{ minHeight: \"68px\" }}>\n      {snakes.map(snake =>\n        <div key={snake.colour} style={{ display: \"inline-flex\", flexDirection: \"column\", alignItems: \"center\", margin: \"5px\" }}>\n          <SnakeControl selectSnake={() => selectSnake(snake.id)} colour={snake.colour || \"\"} health={snake.health} title={snake.colour} changeHealth={(value) => changeSnakeHealth(value, snake.id)} />\n        </div>\n      )}\n    </div>\n    <StyledButton onClick={addSnake}>Add Snake</StyledButton>\n  </TitledContainer>\n)","import React, { Component, Ref } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { IBoardState } from './types/IBoardState.interface';\nimport { Board } from './components/board';\nimport { ICoordinate } from './types/ICoordinate.type';\nimport { SnakeControl } from './components/SnakeControl/SnakeControl';\nimport { IBoardMove } from './types/IBoardMove';\nimport { TitledContainer } from './components/TitledContainer/TitledContainer';\nimport { BoardControls } from './components/BoardControls/BoardControls';\nimport { StyledButton } from './components/StyledButton/StyledButton';\nimport { generateColour, generateId } from './shared/utils';\nimport { TestSnake } from './components/TestSnake/TestSnake';\nimport { CenteredRow } from './components/CenteredRow/CenteredRow';\nimport { ColourSquare } from './components/ColourSquare/ColourSquare';\nimport { FoodControl } from './components/FoodControl/FoodControl';\nimport { YouControl } from './components/YouControl/YouControl';\nimport { OtherSnakesControl } from './components/OtherSnakesControl/OtherSnakesControl';\n\ninterface IAppState {\n  id: string;\n  height: string;\n  width: string;\n  food: ICoordinate[];\n  snakes: {\n    id: string;\n    colour: string;\n    body: ICoordinate[];\n    health: string;\n  }[];\n  you: {\n    colour: string;\n    body: ICoordinate[];\n    health: string;\n    id: \"you\";\n  };\n  mode: \"food\" | \"you\" | \"snake\";\n  chosenId: string;\n}\n\nclass App extends Component<{}, IAppState> {\n\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      id: generateId(),\n      height: \"11\",\n      width: \"11\",\n      food: [],\n      snakes: [],\n      you: {\n        colour: \"#22aa34\",\n        body: [],\n        health: \"100\",\n        id: \"you\"\n      },\n      mode: \"food\",\n      chosenId: \"\"\n    }\n  }\n\n  private findExistingCell = (id: string, x: number, y: number) => {\n    const { food, you, snakes } = this.state;\n\n    switch (id) {\n      case \"food\":\n        return {\n          id: \"food\",\n          index: food.findIndex(item => item.x === x && item.y === y)\n        };\n      case \"you\":\n        return {\n          id: \"you\",\n          index: you.body.findIndex(item => item.x === x && item.y === y)\n        };\n      case undefined:\n        return undefined;\n      default:\n        const snake = snakes.find(snake => snake.id === id);\n        if (snake) {\n          return {\n            id: id,\n            index: snake.body.findIndex(item => item.x === x && item.y === y)\n          };\n        }\n    }\n  }\n\n  private checkIfCellConnected: (x: number, y: number, body: ICoordinate[]) => boolean = (x, y, body) => {\n    return body.some(segment => (Math.abs(segment.x - x) === 1 && segment.y === y) || (Math.abs(segment.y - y) === 1 && segment.x === x));\n  }\n\n  public selectCell = (x: number, y: number, id: string) => {\n\n    const { mode, food, you, snakes, chosenId } = this.state;\n    let existingIndex: {\n      id: string;\n      index: number;\n    } | undefined = this.findExistingCell(id, x, y);\n\n    if (existingIndex) {\n\n      const foundId: string = existingIndex.id;\n\n      switch (foundId) {\n        case \"food\":\n          food.splice(existingIndex.index, 1);\n          break;\n        case \"you\":\n          you.body.splice(existingIndex.index);\n          break;\n        default:\n          const matchingSnake = snakes.find(snake => snake.id === foundId);\n          if (matchingSnake) {\n            matchingSnake.body.splice(existingIndex.index)\n          }\n          break;\n      }\n    }\n\n    if (!existingIndex || (existingIndex.id !== mode && existingIndex.id !== chosenId)) {\n      switch (mode) {\n        case \"food\":\n          food.push({ x, y });\n          break;\n        case \"you\":\n          if (you.body.length === 0 || this.checkIfCellConnected(x, y, you.body)) {\n            you.body.unshift({ x, y });\n          }\n          break;\n        case \"snake\":\n          const matchingSnake = snakes.find(snake => snake.id === chosenId);\n          if (!matchingSnake) {\n            return;\n          }\n          if (matchingSnake.body.length === 0 || this.checkIfCellConnected(x, y, matchingSnake.body)) {\n            matchingSnake.body.unshift({ x, y });\n          }\n          break;\n      }\n    }\n\n    this.setState({ mode, food, you, snakes, chosenId });\n  }\n\n  private buildBoardState: () => IBoardState = () => {\n    return {\n      game: {\n        id: this.state.id,\n        ruleset: {\n          name: \"standard\",\n          version: \"v.1.2.3\"\n        },\n        timeout: 500\n      },\n      turn: 200,\n      you: {\n        health: parseInt(this.state.you.health, 10),\n        id: \"you\",\n        name: this.state.you.colour,\n        body: this.state.you.body,\n        head: this.state.you.body[0],\n        length: this.state.you.body.length\n      },\n      board: {\n        food: this.state.food,\n        height: parseInt(this.state.height, 10),\n        width: parseInt(this.state.width, 10),\n        snakes: [{\n          health: parseInt(this.state.you.health, 10),\n          id: \"you\",\n          name: this.state.you.colour,\n          body: this.state.you.body,\n          head: this.state.you.body[0],\n          length: this.state.you.body.length\n        }].concat(this.state.snakes.map(snake => ({\n          health: parseInt(snake.health, 10),\n          id: snake.id,\n          name: snake.colour,\n          body: snake.body,\n          head: snake.body[0],\n          length: snake.body.length\n        })))\n      }\n    }\n  }\n\n  public addSnake = () => {\n    const colour = generateColour();\n    const { snakes } = this.state;\n    snakes.push({\n      body: [],\n      colour: colour,\n      health: \"100\",\n      id: colour\n    });\n\n    this.setState({ snakes })\n  }\n\n  public selectSnake = (id: string) => {\n    this.setState({\n      mode: \"snake\",\n      chosenId: id\n    });\n  }\n\n  public selectFood = () => {\n    this.setState({\n      mode: \"food\",\n      chosenId: \"\"\n    });\n  }\n\n  public selectYou = () => {\n    this.setState({\n      mode: \"you\",\n      chosenId: \"\"\n    });\n  }\n\n  public changeSnakeHealth = (health: string, targetSnakeId: \"you\" | string) => {\n    const { you, snakes } = this.state;\n\n    if (targetSnakeId === \"you\") {\n      you.health = health;\n      this.setState({ you });\n      return;\n    } else {\n      const targetSnake = snakes.find(snake => snake.id === targetSnakeId);\n      if (targetSnake) {\n        targetSnake.health = health;\n        this.setState({ snakes });\n      }\n    }\n  }\n\n  public changeBoardHeight = (height: string) => this.setState({ height });\n\n  public changeBoardWidth = (width: string) => this.setState({ width });\n\n  public uploadBoard = (board: string) => {\n    try {\n      const uploadedState: IBoardState = JSON.parse(board);\n      this.setState({\n        id: generateId(),\n        height: uploadedState.board.height.toString(),\n        width: uploadedState.board.width.toString(),\n        food: uploadedState.board.food,\n        snakes: uploadedState.board.snakes.filter(snake => snake.id !== uploadedState.you.id).map(snake => {\n          const colour: string = generateColour();\n          return {\n            id: colour,\n            colour: colour,\n            body: snake.body,\n            health: snake.health.toString(),\n          }\n        }),\n        you: {\n          colour: \"#22aa34\",\n          body: uploadedState.you.body,\n          health: uploadedState.you.health.toString(),\n          id: \"you\"\n        },\n        mode: \"food\",\n        chosenId: \"\"\n      });\n    } catch (e) {\n      alert(\"That didn't work\");\n    }\n  }\n\n  render() {\n\n    const { height, width, snakes, you, food, mode, chosenId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"control-container\">\n          <YouControl selectYou={this.selectYou} colour={you.colour} health={you.health} changeHealth={(value) => this.changeSnakeHealth(value, \"you\")} />\n          <OtherSnakesControl addSnake={this.addSnake} changeSnakeHealth={this.changeSnakeHealth} selectSnake={this.selectSnake} snakes={snakes} />\n          <FoodControl foodCount={food.length} selectFood={this.selectFood} />\n          <BoardControls\n            boardState={this.buildBoardState()}\n            changeHeight={this.changeBoardHeight}\n            changeWidth={this.changeBoardWidth}\n            height={height}\n            width={width}\n            uploadBoard={this.uploadBoard}\n          />\n          <TestSnake boardState={this.buildBoardState()} />\n         \n        </div>\n        <div style={{ display: \"flex\", alignItems: \"center\", flexDirection: \"column\" }}>\n          <TitledContainer title=\"Current Mode\">\n            <div className=\"current-mode\">\n              <ColourSquare colour={mode === \"food\" ? \"orange\" : mode === \"you\" ? \"#22aa34\" : chosenId} />\n              <span style={{ marginLeft: 10 }}>{mode !== \"snake\" ? mode : chosenId}</span>\n            </div>\n          </TitledContainer>\n          <Board boardState={this.buildBoardState()} onChange={this.selectCell} />\n          <TitledContainer title=\"Version\">\n            <p>v0.3</p>\n          </TitledContainer>\n        </div>\n        <div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}